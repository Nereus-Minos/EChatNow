多功能网站(EChat)搭建：
	一.项目介绍：
		网站实现了博客和项目效果展示、博客编写、资源下载、聊天、搜索等多种功能。
		网站前端使用html、css、JavaScript、jQuery等技术搭建实现手机电脑自适应；后端使用django+python+C模式搭建实现各个模块的响应工作。
	
	二.本人主要完成的模块：
		技术博客模块、微聊(聊天通讯)模块、搜索模块、数据库模块、注册登录登出模块、设置模块、资源下载模块
	
	三.各模块基本介绍：
		1.技术博客模块:
			包括博客编写 | 博客展示两大部分; 博客编写又分为博客创作 | 博客修改两部分; 博客展示分为粗略博客展示 | 单个博客精确展示;
			1.1 博客编写：(类似于CSDN的写文章)
				约定:必须填写标题才能提交,因为以便在博客展示的时候能够更好的显示!!!
				在此部分嵌入的是开源的富文本编辑器simditor,好处对移动端和PC端都能非常好的兼容.因为常用的tinyMCE功能强大，但是对手机的支持不好.
				其中,上传图片需要后台专门处理(前端传输还是ajax):
					拿到前端发送过来的图片对象后,先将图片进行缩放操作(统一尺寸),然后保存缩放后的图片,最后将图片保存位置会送给前端.
				点击提交并不是真正的提交,在正式提交之前,会有弹框,进行博客类型选择,或者自定义类型;
				提交处理函数handle_write_blog:将前端传过来的博客信息存储到数据库;(博客主体内容直接存储为HTML)
			   博客修改:
					采用url关键字参数传输,将博客的id传给后台,后台根据id查找除博客的信息返回给编写界面;
			1.2 博客展示：(又分为粗略所有博客展示和单个博客精确展示)
				粗略博客展示:(嵌入全文连接,在给过滤器传参时,先占一个位,返回后在js中替换)
					传递采用传输存放博客信息列表的列表的方式;
					前端接收到后端列表数据,通过jQuery循环动态插入相关信息:(采用分段拼接插入法)
						在处理blog内容时需要禁止html转义{{ value|safe }}其中safe为不转义,addslashes为单引号转义(防止内容中有单引号导致jQuery变量复制失败),后端传过来的blog内容为HTML块,里面使用"",所以在使用''变量承接;
						摘取原始HTML部分来作为显示(使用自定义过滤器过滤): 
							算法:从第一个HTML内容开始计数,其中<img>算两个字,&nbsp;即空格算一个字,遇到<br>和</p>如果count不是50的倍数则按50的整数倍算,当计数大于150的时候就停止,并截取此段HTML,
								之后需要补全截取的残缺HTML,使用入栈出栈操作,实现补全,即将开始标签压入栈中,遇到结束标签则弹出,最后留在栈中的标签即为没有匹配的标签,需要补全;
								最后的最后还需要在模板中禁止转义!!!!
					没登录时,为全部博客展示;登录时,为个人博客展示;全部博客在首页展示;
				精细博客展示:
					后端数据库查找id为前端传过来的文章的信息,返回给前端页面;
					
		2.微聊模块:
			分为用户列表 | 聊天系统 | 消息通知机制 | 添加删除好友机制;  (不足:用户在线机制)
			2.1 实现通讯录列表展示：
				通过mysql数据库获取所有的用户以及与登录用户相关的好友信息存入列表中,去除所有用户中好友用户得到不是好友列表，将好友列表和不是好友列表传给前端；
				前端通过类似于上述博客展示,动态展示好友信息以及不是好友信息;
				对于好友:
					有聊天功能,删除好友功能
				对于非好友:
					有添加好友功能:点击"加好友"将好友的名字传到后端,然后进行好友互相认证,即双方数据库信息都将其设为好友;
			2.2 一对一多人聊天：
				2.2.1 方法一:使用轮训方式
					1.点击聊天按钮后，首先查询数据库将和此好友聊天记录最新10条记录展示出来，并向前端返回数据；
					2.聊天处理（使用ajax来响应发送消息按钮）：
						每次输入的内容通过jQuery及时返回到页面上;
						每次将用户发送的内容传给后台，后台将其保存至数据库聊天记录中，并标记为消息未读；还需在聊天界面中设置周期为0.5秒的定时器，每次都使用ajax向后台请求是否有新的未读消息(is_read字段设为0表示新消息)。
				2.2.2 方法二:使用websocket建立长连接  
					1.采用的是channels技术,建立websocket长连接
			2.3 通知机制:
					采用前端定时1秒ajax向后台请求是否有未读消息;
			2.4 用户在线机制:
					前端每个1s左右就像后台发送"我在线"信息;并使用数据库存储每一次前端告诉后台("我在线")的时间;如果后台在两个周期后还没有更新数据库就自动删除此用户登录信息;  Redis好像能设定过期时间自动删除数据.
		3.资源下载模块
			
			
		4.搜索模块
			4.1 点击head的伪输入框，调用searching函数，跳转到searching.html页面，提交后调用searching_handle函数。
				(注意：在取名字时不能用handle_search来命名views函数)
				如果输入框为空则返回搜索之前的页面。
				
		5.数据库模块
			5.1
			
		6.注册登录登出模块（代码复用，第一次请求返回最初界面）(密码通过MD5编码存储 hashlib.md5() )
			头像默认不用上传
			6.1 注册模块  （注册-->登录-->内部首页）
				前端通过“      ”实现输入框信息是否正确检查；
				前端信息输入正确后，将数据通过POST请求发送给后端，后端使用字典保存；
				后台通过查询数据库，如果没有此用户注册就将注册信息存入数据库中，并告诉前端注册成功（通过给模板传输一个flag），然后执行登录函数（实现代码复用）；
				否则告诉前端用户已注册（通过给模板传输一个flag），重新刷新注册页面；
			6.2 登录模块  （登录-->内部首页）
				获得POST请求中的用户名和密码，查询数据库对比，正确，则设置相关登录信息的session值，执行首页函数；错误，则向登录界面返回错误信息并重新加载登录界面；
			6.3 登出模块
				只需要改变登录信息相关的session值，然后执行首页函数即可；（在首页函数中会根据相关ssesion值做出跳转到内部网页还是外部网页）
		7.设置模块（代码复用）
			第一次（点击菜单设置）请求设置模块时，需要将用户的基本信息（用户名、邮箱、头像等）一并返回给设置界面；
			头像上传处理：(头像路径采用过滤器得到{{ user.face|face24 }})（头像在数据库中是保存的存储位置，并不是直接保存的图片）（前端使用ajax请求上传）
				1.（头像回显）当点击头像上传时，后端通过头像临时处理函数临时保存头像，并将临时位置返回给ajax，从而在前端显示上传结果；
				2.（缩略图存储已用户ID标记）存储指定大小的头像照片，16*16,24*24,32*32；
			第二次（点击保存）请求（在前端已经检查信息的正确性）设置模块，修改数据库的相关信息，复制临时头像到永久头像存储位置（覆盖之前的永久头像）,并清空临时头像存储;
	
